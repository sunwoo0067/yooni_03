version: '3.8'

services:
  # 프론트엔드 (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dropshipping_frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - dropshipping_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 백엔드 (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dropshipping_backend
    ports:
      - "8000:8000"
    environment:
      # 데이터베이스
      - DATABASE_URL=postgresql://dropshipping:${DB_PASSWORD}@db:5432/dropshipping_db
      - REDIS_URL=redis://redis:6379/0
      
      # 보안
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # 환경 설정
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_DEFAULT=100/minute
      - RATE_LIMIT_STORAGE_URL=redis://redis:6379/1
      
      # 모니터링
      - PROMETHEUS_ENABLED=true
      - SENTRY_DSN=${SENTRY_DSN:-}
      
      # 외부 API
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_TRENDS_API_KEY=${GOOGLE_TRENDS_API_KEY:-}
      - NAVER_API_CLIENT_ID=${NAVER_API_CLIENT_ID:-}
      - NAVER_API_CLIENT_SECRET=${NAVER_API_CLIENT_SECRET:-}
      
      # 마켓플레이스 API
      - COUPANG_ACCESS_KEY=${COUPANG_ACCESS_KEY:-}
      - COUPANG_SECRET_KEY=${COUPANG_SECRET_KEY:-}
      - COUPANG_VENDOR_ID=${COUPANG_VENDOR_ID:-}
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID:-}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET:-}
      - ELEVENTH_API_KEY=${ELEVENTH_API_KEY:-}
      
      # 도매 API
      - ZENTRADE_API_KEY=${ZENTRADE_API_KEY:-}
      - OWNERCLAN_API_KEY=${OWNERCLAN_API_KEY:-}
      - DOMEGGOOK_API_KEY=${DOMEGGOOK_API_KEY:-}
      
      # 이메일
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
      
      # 백업 설정
      - BACKUP_ENABLED=true
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET:-}
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
      - ./backups:/app/backups
    networks:
      - dropshipping_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    container_name: dropshipping_db
    environment:
      POSTGRES_DB: dropshipping_db
      POSTGRES_USER: dropshipping
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
      - ./backups:/backups
    networks:
      - dropshipping_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dropshipping -d dropshipping_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: dropshipping_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    networks:
      - dropshipping_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx 리버스 프록시 (프로덕션에서 프론트엔드와 분리)
  nginx:
    image: nginx:alpine
    container_name: dropshipping_nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - dropshipping_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: dropshipping_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - dropshipping_network
    restart: unless-stopped

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: dropshipping_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - dropshipping_network
    restart: unless-stopped

  # Node Exporter (시스템 메트릭)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: dropshipping_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - dropshipping_network
    restart: unless-stopped

  # cAdvisor (컨테이너 메트릭)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: dropshipping_cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - dropshipping_network
    restart: unless-stopped

  # 백업 서비스
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: dropshipping_backup
    environment:
      - DATABASE_URL=postgresql://dropshipping:${DB_PASSWORD}@db:5432/dropshipping_db
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET:-}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - db
    networks:
      - dropshipping_network
    restart: "no"
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  dropshipping_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1