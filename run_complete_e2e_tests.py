"""
ÏôÑÏ†ÑÌïú ÏóîÎìúÌà¨ÏóîÎìú ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏
Î™®Îì† ÎπÑÏ¶àÎãàÏä§ ÏõåÌÅ¨ÌîåÎ°úÏö∞Î•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§.
"""

import asyncio
import json
import time
import os
from datetime import datetime
from typing import Dict, List
import logging

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('e2e_test_execution.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CompleteE2ETestRunner:
    """ÏôÑÏ†ÑÌïú E2E ÌÖåÏä§Ìä∏ Ïã§ÌñâÍ∏∞"""
    
    def __init__(self):
        self.test_session_id = f"COMPLETE_E2E_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.start_time = datetime.now()
        
    async def run_all_workflow_tests(self):
        """Î™®Îì† ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        print("üöÄ ÎìúÎ°≠Ïâ¨Ìïë ÏãúÏä§ÌÖú ÏôÑÏ†ÑÌïú E2E ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ ÏãúÏûë".encode('utf-8').decode('utf-8'))
        print("=" * 80)
        
        overall_start = time.time()
        
        # Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ Í≤∞Í≥º Íµ¨Ï°∞
        complete_results = {
            "test_session_id": self.test_session_id,
            "test_start_time": self.start_time.isoformat(),
            "basic_workflows": [],
            "advanced_workflows": [],
            "overall_summary": {},
            "business_impact_analysis": {},
            "recommendations": [],
            "test_environment": {
                "test_data_size": "500Í∞ú ÌïúÍµ≠ ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞",
                "test_users": "20Î™ÖÏùò Îã§ÏñëÌïú ÎπÑÏ¶àÎãàÏä§ ÌÉÄÏûÖ",
                "test_scenarios": "Ïã§Ï†ú ÎπÑÏ¶àÎãàÏä§ ÏÇ¨Ïö© ÏÇ¨Î°Ä Í∏∞Î∞ò"
            }
        }
        
        try:
            # 1. Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
            print("\nüìã 1Îã®Í≥Ñ: Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ")
            print("-" * 50)
            
            basic_results = await self._run_basic_workflows()
            complete_results["basic_workflows"] = basic_results
            
            # 2. Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
            print("\nüîß 2Îã®Í≥Ñ: Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ")
            print("-" * 50)
            
            advanced_results = await self._run_advanced_workflows()
            complete_results["advanced_workflows"] = advanced_results
            
            # 3. Ï¢ÖÌï© Î∂ÑÏÑù
            print("\nüìä 3Îã®Í≥Ñ: Ï¢ÖÌï© Í≤∞Í≥º Î∂ÑÏÑù")
            print("-" * 50)
            
            complete_results["overall_summary"] = self._analyze_overall_results(
                basic_results, advanced_results
            )
            
            complete_results["business_impact_analysis"] = self._analyze_business_impact(
                basic_results, advanced_results
            )
            
            complete_results["recommendations"] = self._generate_comprehensive_recommendations(
                basic_results, advanced_results
            )
            
            # 4. Í≤∞Í≥º Ï†ÄÏû•
            await self._save_complete_results(complete_results)
            
        except Exception as e:
            logger.error(f"ÏôÑÏ†ÑÌïú E2E ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò: {str(e)}")
            complete_results["error"] = str(e)
        
        # ÌÖåÏä§Ìä∏ ÏôÑÎ£å
        total_execution_time = time.time() - overall_start
        complete_results["test_end_time"] = datetime.now().isoformat()
        complete_results["total_execution_time"] = total_execution_time
        
        # ÏµúÏ¢Ö Í≤∞Í≥º Ï∂úÎ†•
        self._print_final_results(complete_results)
        
        return complete_results
    
    async def _run_basic_workflows(self):
        """Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        try:
            # comprehensive_e2e_workflow_tests.pyÏùò ComprehensiveTestRunner ÏÇ¨Ïö©
            from comprehensive_e2e_workflow_tests import ComprehensiveTestRunner
            
            test_runner = ComprehensiveTestRunner()
            results = await test_runner.run_all_tests()
            
            logger.info("‚úÖ Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ ÏôÑÎ£å")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {str(e)}")
            return {
                "error": str(e),
                "workflow_results": [],
                "overall_metrics": {},
                "business_impact_summary": {}
            }
    
    async def _run_advanced_workflows(self):
        """Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        try:
            # advanced_workflow_tests.pyÏùò ÌÖåÏä§Ìä∏Îì§ Ïã§Ìñâ
            from advanced_workflow_tests import run_advanced_workflow_tests
            
            results = await run_advanced_workflow_tests()
            
            logger.info("‚úÖ Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ ÏôÑÎ£å")
            return {
                "workflow_results": results,
                "total_workflows": len(results),
                "successful_workflows": len([r for r in results if r.get("overall_success", False)])
            }
            
        except Exception as e:
            logger.error(f"‚ùå Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {str(e)}")
            return {
                "error": str(e),
                "workflow_results": [],
                "total_workflows": 0,
                "successful_workflows": 0
            }
    
    def _analyze_overall_results(self, basic_results: Dict, advanced_results: Dict) -> Dict:
        """Ï†ÑÏ≤¥ Í≤∞Í≥º Ï¢ÖÌï© Î∂ÑÏÑù"""
        analysis = {
            "total_workflows_tested": 0,
            "successful_workflows": 0,
            "failed_workflows": 0,
            "overall_success_rate": 0,
            "total_steps_executed": 0,
            "successful_steps": 0,
            "step_success_rate": 0,
            "average_execution_time": 0,
            "performance_score": 0,
            "user_experience_score": 0,
            "system_reliability_score": 0
        }
        
        # Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î∂ÑÏÑù
        if "workflow_results" in basic_results:
            basic_workflows = basic_results["workflow_results"]
            analysis["total_workflows_tested"] += len(basic_workflows)
            
            for workflow in basic_workflows:
                if workflow.get("overall_success", False):
                    analysis["successful_workflows"] += 1
                else:
                    analysis["failed_workflows"] += 1
                
                # Îã®Í≥ÑÎ≥Ñ Î∂ÑÏÑù
                steps = workflow.get("steps", [])
                analysis["total_steps_executed"] += len(steps)
                analysis["successful_steps"] += sum(1 for step in steps if step.get("success", False))
        
        # Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î∂ÑÏÑù
        if "workflow_results" in advanced_results:
            advanced_workflows = advanced_results["workflow_results"]
            analysis["total_workflows_tested"] += len(advanced_workflows)
            
            for workflow in advanced_workflows:
                if workflow.get("overall_success", False):
                    analysis["successful_workflows"] += 1
                else:
                    analysis["failed_workflows"] += 1
                
                # Îã®Í≥ÑÎ≥Ñ Î∂ÑÏÑù
                steps = workflow.get("steps", [])
                analysis["total_steps_executed"] += len(steps)
                analysis["successful_steps"] += sum(1 for step in steps if step.get("success", False))
        
        # ÎπÑÏú® Í≥ÑÏÇ∞
        if analysis["total_workflows_tested"] > 0:
            analysis["overall_success_rate"] = (analysis["successful_workflows"] / analysis["total_workflows_tested"]) * 100
        
        if analysis["total_steps_executed"] > 0:
            analysis["step_success_rate"] = (analysis["successful_steps"] / analysis["total_steps_executed"]) * 100
        
        # ÏÑ±Îä• Ï†êÏàò Í≥ÑÏÇ∞ (Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î©îÌä∏Î¶≠ Í∏∞Î∞ò)
        if "overall_metrics" in basic_results:
            basic_metrics = basic_results["overall_metrics"]
            analysis["performance_score"] = basic_metrics.get("performance_score", 0)
            analysis["user_experience_score"] = basic_metrics.get("user_experience_score", 0)
            analysis["average_execution_time"] = basic_metrics.get("average_execution_time", 0)
        
        # ÏãúÏä§ÌÖú Ïã†Î¢∞ÏÑ± Ï†êÏàò (Îã®Í≥Ñ ÏÑ±Í≥µÎ•† Í∏∞Î∞ò)
        analysis["system_reliability_score"] = analysis["step_success_rate"]
        
        return analysis
    
    def _analyze_business_impact(self, basic_results: Dict, advanced_results: Dict) -> Dict:
        """ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ Ï¢ÖÌï© Î∂ÑÏÑù"""
        impact = {
            "productivity_improvements": {
                "total_products_processed": 0,
                "time_saved_hours": 0,
                "manual_tasks_automated": 0,
                "error_reduction_rate": 0
            },
            "cost_benefits": {
                "estimated_monthly_savings": 0,
                "automation_roi": 0,
                "efficiency_gains": 0,
                "operational_cost_reduction": 0
            },
            "user_experience_improvements": {
                "user_satisfaction_increase": 0,
                "workflow_efficiency_gain": 0,
                "customization_adoption": 0,
                "notification_effectiveness": 0
            },
            "system_performance_gains": {
                "response_time_improvement": 0,
                "system_reliability_increase": 0,
                "error_handling_effectiveness": 0,
                "automated_recovery_success": 0
            },
            "business_opportunities": {
                "market_opportunities_identified": 0,
                "profit_optimization_potential": 0,
                "process_improvement_areas": 0,
                "competitive_advantages": []
            }
        }
        
        # Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ÏóêÏÑú ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ Ï∂îÏ∂ú
        if "business_impact_summary" in basic_results:
            basic_impact = basic_results["business_impact_summary"]
            impact["productivity_improvements"]["total_products_processed"] = basic_impact.get("total_products_processed", 0)
            impact["productivity_improvements"]["time_saved_hours"] = basic_impact.get("total_time_saved_hours", 0)
            impact["cost_benefits"]["estimated_monthly_savings"] = basic_impact.get("estimated_cost_savings_krw", 0)
            impact["cost_benefits"]["automation_roi"] = basic_impact.get("roi_projection", 0)
            impact["business_opportunities"]["market_opportunities_identified"] = basic_impact.get("business_opportunities_identified", 0)
        
        # Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞ÏóêÏÑú ÏûÑÌå©Ìä∏ Ï∂îÏ∂ú
        if "workflow_results" in advanced_results:
            for workflow in advanced_results["workflow_results"]:
                workflow_name = workflow.get("workflow_name", "")
                
                # ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Î∞è Í∞úÏù∏Ìôî ÏûÑÌå©Ìä∏
                if "ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï" in workflow_name and "personalization_metrics" in workflow:
                    pers_metrics = workflow["personalization_metrics"]
                    impact["user_experience_improvements"]["user_satisfaction_increase"] = pers_metrics.get("user_satisfaction_score", 0)
                    impact["user_experience_improvements"]["workflow_efficiency_gain"] = pers_metrics.get("workflow_efficiency_gain", 0)
                    impact["user_experience_improvements"]["customization_adoption"] = pers_metrics.get("customization_adoption_rate", 0)
                
                # ÏÑ±Îä• ÏµúÏ†ÅÌôî ÏûÑÌå©Ìä∏
                if "ÏÑ±Îä• ÏµúÏ†ÅÌôî" in workflow_name and "optimization_metrics" in workflow:
                    opt_metrics = workflow["optimization_metrics"]
                    impact["system_performance_gains"]["response_time_improvement"] = opt_metrics.get("overall_performance_gain", 0)
                    impact["cost_benefits"]["operational_cost_reduction"] = opt_metrics.get("roi_monthly", 0)
                
                # Ïò§Î•ò Ï≤òÎ¶¨ ÏûÑÌå©Ìä∏
                if "Ïò§Î•ò Ï≤òÎ¶¨" in workflow_name and "error_handling_metrics" in workflow:
                    error_metrics = workflow["error_handling_metrics"]
                    impact["system_performance_gains"]["system_reliability_increase"] = error_metrics.get("system_resilience_score", 0)
                    impact["system_performance_gains"]["error_handling_effectiveness"] = error_metrics.get("overall_recovery_rate", 0)
                    impact["system_performance_gains"]["automated_recovery_success"] = error_metrics.get("automation_efficiency", 0)
        
        # Ï¢ÖÌï© ÏßÄÌëú Í≥ÑÏÇ∞
        impact["productivity_improvements"]["manual_tasks_automated"] = min(100, 
            (impact["productivity_improvements"]["time_saved_hours"] / 40) * 100)  # Ï£º 40ÏãúÍ∞Ñ Í∏∞Ï§Ä
        
        impact["cost_benefits"]["efficiency_gains"] = (
            impact["productivity_improvements"]["manual_tasks_automated"] + 
            impact["system_performance_gains"]["response_time_improvement"]
        ) / 2
        
        impact["user_experience_improvements"]["notification_effectiveness"] = (
            impact["user_experience_improvements"]["user_satisfaction_increase"] + 
            impact["user_experience_improvements"]["customization_adoption"]
        ) / 2
        
        # Í≤ΩÏüÅ Ïö∞ÏúÑ ÏöîÏÜå
        impact["business_opportunities"]["competitive_advantages"] = [
            "Ïã§ÏãúÍ∞Ñ ÏàòÏùµÏÑ± Î∂ÑÏÑù ÏûêÎèôÌôî",
            "Îã§Ï§ë Ï±ÑÎÑê ÏïåÎ¶º ÏãúÏä§ÌÖú",
            "ÏßÄÎä•Ìòï Ïò§Î•ò Î≥µÍµ¨",
            "ÏÇ¨Ïö©Ïûê ÎßûÏ∂§Ìòï ÎåÄÏãúÎ≥¥Îìú",
            "ÏòàÏ∏°Ï†Å ÏÑ±Îä• ÏµúÏ†ÅÌôî"
        ]
        
        impact["business_opportunities"]["profit_optimization_potential"] = (
            impact["cost_benefits"]["estimated_monthly_savings"] / 1000000 * 10  # 100ÎßåÏõêÎãπ 10% Í∞ÄÏ†ï
        )
        
        return impact
    
    def _generate_comprehensive_recommendations(self, basic_results: Dict, advanced_results: Dict) -> List[str]:
        """Ï¢ÖÌï© Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±"""
        recommendations = []
        
        # Ï†ÑÏ≤¥ ÏÑ±Í≥µÎ•† Í∏∞Î∞ò Í∂åÏû•ÏÇ¨Ìï≠
        total_workflows = 0
        successful_workflows = 0
        
        if "workflow_results" in basic_results:
            basic_workflows = basic_results["workflow_results"]
            total_workflows += len(basic_workflows)
            successful_workflows += sum(1 for w in basic_workflows if w.get("overall_success", False))
        
        if "workflow_results" in advanced_results:
            advanced_workflows = advanced_results["workflow_results"]
            total_workflows += len(advanced_workflows)
            successful_workflows += sum(1 for w in advanced_workflows if w.get("overall_success", False))
        
        if total_workflows > 0:
            success_rate = (successful_workflows / total_workflows) * 100
            if success_rate < 95:
                recommendations.append(
                    f"üîß Ï†ÑÏ≤¥ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÑ±Í≥µÎ•†Ïù¥ {success_rate:.1f}%ÏûÖÎãàÎã§. "
                    "ÌïµÏã¨ ÎπÑÏ¶àÎãàÏä§ ÌîÑÎ°úÏÑ∏Ïä§Ïùò ÏïàÏ†ïÏÑ±ÏùÑ ÎÜíÏù¥Í∏∞ ÏúÑÌï¥ Ïò§Î•ò Ï≤òÎ¶¨ Î∞è Î≥µÍµ¨ Î©îÏª§ÎãàÏ¶òÏùÑ Í∞ïÌôîÌïòÏÑ∏Ïöî."
                )
        
        # ÏÑ±Îä• Í¥ÄÎ†® Í∂åÏû•ÏÇ¨Ìï≠
        if "overall_metrics" in basic_results:
            metrics = basic_results["overall_metrics"]
            if metrics.get("performance_score", 0) < 85:
                recommendations.append(
                    "‚ö° ÏãúÏä§ÌÖú ÏÑ±Îä• Ï†êÏàòÍ∞Ä 85Ï†ê ÎØ∏ÎßåÏûÖÎãàÎã§. "
                    "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨ ÏµúÏ†ÅÌôî, Ï∫êÏã± Ï†ÑÎûµ Í∞úÏÑ†, ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ ÌôïÎåÄÎ•º Í∂åÏû•Ìï©ÎãàÎã§."
                )
            
            if metrics.get("user_experience_score", 0) < 80:
                recommendations.append(
                    "üë§ ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ï†êÏàòÍ∞Ä 80Ï†ê ÎØ∏ÎßåÏûÖÎãàÎã§. "
                    "ÏùëÎãµ ÏãúÍ∞Ñ Îã®Ï∂ï, UI/UX Í∞úÏÑ†, Í∞úÏù∏Ìôî Í∏∞Îä• Í∞ïÌôîÎ•º ÌÜµÌï¥ ÏÇ¨Ïö©Ïûê ÎßåÏ°±ÎèÑÎ•º ÎÜíÏù¥ÏÑ∏Ïöî."
                )
        
        # ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ Í∏∞Î∞ò Í∂åÏû•ÏÇ¨Ìï≠
        if "business_impact_summary" in basic_results:
            impact = basic_results["business_impact_summary"]
            if impact.get("automation_efficiency", 0) < 85:
                recommendations.append(
                    "ü§ñ ÏûêÎèôÌôî Ìö®Ïú®ÏÑ±Ïù¥ 85% ÎØ∏ÎßåÏûÖÎãàÎã§. "
                    "Î∞òÎ≥µ ÏûëÏóÖÏùò ÏôÑÏ†Ñ ÏûêÎèôÌôî, ÏòàÏô∏ ÏÉÅÌô© Ï≤òÎ¶¨ Î°úÏßÅ Í∞úÏÑ†, AI Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõêÏùÑ ÎèÑÏûÖÌïòÏÑ∏Ïöî."
                )
            
            if impact.get("roi_projection", 0) < 50:
                recommendations.append(
                    "üí∞ ROI ÏòàÏ∏°Ïù¥ 50% ÎØ∏ÎßåÏûÖÎãàÎã§. "
                    "ÎπÑÏö© Ï†àÏïΩ Ìö®Í≥ºÎ•º ÎÜíÏù¥Í∏∞ ÏúÑÌï¥ Î¶¨ÏÜåÏä§ ÏÇ¨Ïö© ÏµúÏ†ÅÌôî, ÌîÑÎ°úÏÑ∏Ïä§ Í∞ÑÏÜåÌôî, Ïä§ÏºÄÏùº Í≤ΩÏ†ú Ïã§ÌòÑÏùÑ Ï∂îÏßÑÌïòÏÑ∏Ïöî."
                )
        
        # Í≥†Í∏â Í∏∞Îä• Í¥ÄÎ†® Í∂åÏû•ÏÇ¨Ìï≠
        if "workflow_results" in advanced_results:
            for workflow in advanced_results["workflow_results"]:
                workflow_name = workflow.get("workflow_name", "")
                
                # Í∞úÏù∏Ìôî Í¥ÄÎ†®
                if "ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï" in workflow_name and "personalization_metrics" in workflow:
                    pers_metrics = workflow["personalization_metrics"]
                    if pers_metrics.get("customization_adoption_rate", 0) < 70:
                        recommendations.append(
                            "üé® ÏÇ¨Ïö©Ïûê Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï Ï±ÑÌÉùÎ•†Ïù¥ 70% ÎØ∏ÎßåÏûÖÎãàÎã§. "
                            "Îçî ÏßÅÍ¥ÄÏ†ÅÏù∏ ÏÑ§Ï†ï Ïù∏ÌÑ∞ÌéòÏù¥Ïä§, ÎØ∏Î¶¨ Ï†ïÏùòÎêú ÌÖúÌîåÎ¶ø, Í∞ÄÏù¥Îìú Ìà¨Ïñ¥Î•º Ï†úÍ≥µÌïòÏÑ∏Ïöî."
                        )
                
                # ÏÑ±Îä• ÏµúÏ†ÅÌôî Í¥ÄÎ†®
                if "ÏÑ±Îä• ÏµúÏ†ÅÌôî" in workflow_name and "optimization_metrics" in workflow:
                    opt_metrics = workflow["optimization_metrics"]
                    if opt_metrics.get("overall_performance_gain", 0) < 30:
                        recommendations.append(
                            "üöÄ ÏÑ±Îä• Í∞úÏÑ† Ìö®Í≥ºÍ∞Ä 30% ÎØ∏ÎßåÏûÖÎãàÎã§. "
                            "Îçî Ï†ÅÍ∑πÏ†ÅÏù∏ ÏµúÏ†ÅÌôî Ï†ÑÎûµ, Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ Í∞ïÌôî, ÏòàÏ∏°Ï†Å Ïä§ÏºÄÏùºÎßÅÏùÑ ÎèÑÏûÖÌïòÏÑ∏Ïöî."
                        )
                
                # Ïò§Î•ò Ï≤òÎ¶¨ Í¥ÄÎ†®
                if "Ïò§Î•ò Ï≤òÎ¶¨" in workflow_name and "error_handling_metrics" in workflow:
                    error_metrics = workflow["error_handling_metrics"]
                    if error_metrics.get("overall_recovery_rate", 0) < 90:
                        recommendations.append(
                            "üõ°Ô∏è Ïò§Î•ò Î≥µÍµ¨Ïú®Ïù¥ 90% ÎØ∏ÎßåÏûÖÎãàÎã§. "
                            "Îçî Í∞ïÎ†•Ìïú Circuit Breaker Ìå®ÌÑ¥, Îã§Ï§ë Î∞±ÏóÖ Ï†ÑÎûµ, ÏßÄÎä•Ìòï Î≥µÍµ¨ ÏïåÍ≥†Î¶¨Ï¶òÏùÑ Íµ¨ÌòÑÌïòÏÑ∏Ïöî."
                        )
        
        # Ï†ÑÎûµÏ†Å Í∂åÏû•ÏÇ¨Ìï≠
        recommendations.extend([
            "üìä Ïã§ÏãúÍ∞Ñ ÎπÑÏ¶àÎãàÏä§ Ïù∏ÌÖîÎ¶¨Ï†ÑÏä§ ÎåÄÏãúÎ≥¥ÎìúÎ•º Íµ¨Ï∂ïÌïòÏó¨ ÏùòÏÇ¨Í≤∞Ï†ï ÏÜçÎèÑÎ•º ÎÜíÏù¥ÏÑ∏Ïöî.",
            "üîÑ ÏßÄÏÜçÏ†Å ÌÜµÌï©/Î∞∞Ìè¨(CI/CD) ÌååÏù¥ÌîÑÎùºÏù∏ÏùÑ Í∞ïÌôîÌïòÏó¨ ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÏ†ïÏÑ±ÏùÑ Ìñ•ÏÉÅÏãúÌÇ§ÏÑ∏Ïöî.",
            "üß† Î®∏Ïã†Îü¨Îãù Í∏∞Î∞ò ÏòàÏ∏° Î∂ÑÏÑùÏùÑ ÎèÑÏûÖÌïòÏó¨ ÌîÑÎ°úÏï°Ìã∞Î∏åÌïú ÎπÑÏ¶àÎãàÏä§ Ïö¥ÏòÅÏùÑ Ïã§ÌòÑÌïòÏÑ∏Ïöî.",
            "üåê ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ ÏïÑÌÇ§ÌÖçÏ≤òÎ°úÏùò Ï†êÏßÑÏ†Å Ï†ÑÌôòÏùÑ ÌÜµÌï¥ ÏãúÏä§ÌÖú ÌôïÏû•ÏÑ±ÏùÑ ÎÜíÏù¥ÏÑ∏Ïöî.",
            "üì± Î™®Î∞îÏùº ÏµúÏ†ÅÌôî Î∞è PWA Í∏∞Ïà† ÎèÑÏûÖÏúºÎ°ú ÏÇ¨Ïö©Ïûê Ï†ëÍ∑ºÏÑ±ÏùÑ Í∞úÏÑ†ÌïòÏÑ∏Ïöî."
        ])
        
        # Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ†¨
        unique_recommendations = list(dict.fromkeys(recommendations))
        
        return unique_recommendations[:10]  # ÏÉÅÏúÑ 10Í∞ú Í∂åÏû•ÏÇ¨Ìï≠Îßå Î∞òÌôò
    
    async def _save_complete_results(self, results: Dict):
        """ÏôÑÏ†ÑÌïú ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•"""
        try:
            # JSON Í≤∞Í≥º ÌååÏùº
            results_filename = f"complete_e2e_test_results_{self.test_session_id}.json"
            results_path = os.path.join(os.getcwd(), results_filename)
            
            with open(results_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            
            # ÏöîÏïΩ Î≥¥Í≥†ÏÑú (ÎßàÌÅ¨Îã§Ïö¥)
            summary_filename = f"e2e_test_summary_{self.test_session_id}.md"
            summary_path = os.path.join(os.getcwd(), summary_filename)
            
            await self._generate_markdown_report(results, summary_path)
            
            # ÎπÑÏ¶àÎãàÏä§ Î≥¥Í≥†ÏÑú (Excel)
            business_filename = f"business_impact_report_{self.test_session_id}.xlsx"
            business_path = os.path.join(os.getcwd(), business_filename)
            
            await self._generate_business_report(results, business_path)
            
            logger.info(f"‚úÖ ÏôÑÏ†ÑÌïú ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•:")
            logger.info(f"   üìÑ ÏÉÅÏÑ∏ Í≤∞Í≥º: {results_path}")
            logger.info(f"   üìã ÏöîÏïΩ Î≥¥Í≥†ÏÑú: {summary_path}")
            logger.info(f"   üìä ÎπÑÏ¶àÎãàÏä§ Î≥¥Í≥†ÏÑú: {business_path}")
            
        except Exception as e:
            logger.error(f"‚ùå ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû• Ïã§Ìå®: {str(e)}")
    
    async def _generate_markdown_report(self, results: Dict, file_path: str):
        """ÎßàÌÅ¨Îã§Ïö¥ ÌòïÌÉúÏùò ÏöîÏïΩ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write("# ÎìúÎ°≠Ïâ¨Ìïë ÏãúÏä§ÌÖú ÏôÑÏ†ÑÌïú E2E ÌÖåÏä§Ìä∏ Î≥¥Í≥†ÏÑú\n\n")
                
                # ÌÖåÏä§Ìä∏ Í∞úÏöî
                f.write("## üìã ÌÖåÏä§Ìä∏ Í∞úÏöî\n\n")
                f.write(f"- **ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò ID**: {results['test_session_id']}\n")
                f.write(f"- **Ïã§Ìñâ Í∏∞Í∞Ñ**: {results['test_start_time']} ~ {results['test_end_time']}\n")
                f.write(f"- **Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ**: {results['total_execution_time']:.2f}Ï¥à\n")
                f.write(f"- **ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω**: {results['test_environment']['test_data_size']}\n\n")
                
                # Ï†ÑÏ≤¥ Í≤∞Í≥º ÏöîÏïΩ
                if "overall_summary" in results:
                    summary = results["overall_summary"]
                    f.write("## üéØ Ï†ÑÏ≤¥ Í≤∞Í≥º ÏöîÏïΩ\n\n")
                    f.write(f"| ÏßÄÌëú | Í∞í |\n")
                    f.write(f"|------|----|\n")
                    f.write(f"| ÌÖåÏä§Ìä∏Îêú ÏõåÌÅ¨ÌîåÎ°úÏö∞ | {summary['total_workflows_tested']}Í∞ú |\n")
                    f.write(f"| ÏÑ±Í≥µÌïú ÏõåÌÅ¨ÌîåÎ°úÏö∞ | {summary['successful_workflows']}Í∞ú |\n")
                    f.write(f"| Ï†ÑÏ≤¥ ÏÑ±Í≥µÎ•† | {summary['overall_success_rate']:.1f}% |\n")
                    f.write(f"| Ïã§ÌñâÎêú Îã®Í≥Ñ | {summary['total_steps_executed']}Í∞ú |\n")
                    f.write(f"| Îã®Í≥Ñ ÏÑ±Í≥µÎ•† | {summary['step_success_rate']:.1f}% |\n")
                    f.write(f"| ÏÑ±Îä• Ï†êÏàò | {summary['performance_score']:.1f}/100 |\n")
                    f.write(f"| ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ï†êÏàò | {summary['user_experience_score']:.1f}/100 |\n")
                    f.write(f"| ÏãúÏä§ÌÖú Ïã†Î¢∞ÏÑ± Ï†êÏàò | {summary['system_reliability_score']:.1f}/100 |\n\n")
                
                # ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏
                if "business_impact_analysis" in results:
                    impact = results["business_impact_analysis"]
                    f.write("## üíº ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ Î∂ÑÏÑù\n\n")
                    
                    f.write("### ÏÉùÏÇ∞ÏÑ± Ìñ•ÏÉÅ\n")
                    prod = impact["productivity_improvements"]
                    f.write(f"- Ï≤òÎ¶¨Îêú ÏÉÅÌíà: **{prod['total_products_processed']:,}Í∞ú**\n")
                    f.write(f"- Ï†àÏïΩÎêú ÏãúÍ∞Ñ: **{prod['time_saved_hours']:.1f}ÏãúÍ∞Ñ**\n")
                    f.write(f"- ÏûêÎèôÌôîÎêú ÏûëÏóÖ: **{prod['manual_tasks_automated']:.1f}%**\n\n")
                    
                    f.write("### ÎπÑÏö© Ìö®Í≥º\n")
                    cost = impact["cost_benefits"]
                    f.write(f"- ÏõîÍ∞Ñ ÏòàÏÉÅ Ï†àÏïΩ: **{cost['estimated_monthly_savings']:,}Ïõê**\n")
                    f.write(f"- ÏûêÎèôÌôî ROI: **{cost['automation_roi']:.1f}%**\n")
                    f.write(f"- Ìö®Ïú®ÏÑ± Ï¶ùÎåÄ: **{cost['efficiency_gains']:.1f}%**\n\n")
                    
                    f.write("### ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Í∞úÏÑ†\n")
                    ux = impact["user_experience_improvements"]
                    f.write(f"- ÏÇ¨Ïö©Ïûê ÎßåÏ°±ÎèÑ Ï¶ùÍ∞Ä: **{ux['user_satisfaction_increase']:.1f}%**\n")
                    f.write(f"- ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ìö®Ïú®ÏÑ±: **{ux['workflow_efficiency_gain']:.1f}%**\n")
                    f.write(f"- Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï Ï±ÑÌÉùÎ•†: **{ux['customization_adoption']:.1f}%**\n\n")
                
                # Ï£ºÏöî ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í≤∞Í≥º
                f.write("## üîÑ Ï£ºÏöî ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ Í≤∞Í≥º\n\n")
                
                # Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞
                if "basic_workflows" in results and "workflow_results" in results["basic_workflows"]:
                    f.write("### Í∏∞Î≥∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞\n")
                    for workflow in results["basic_workflows"]["workflow_results"]:
                        name = workflow.get("workflow_name", "Unknown")
                        success = "‚úÖ" if workflow.get("overall_success", False) else "‚ùå"
                        f.write(f"- {success} **{name}**\n")
                        
                        if "steps" in workflow:
                            successful_steps = sum(1 for step in workflow["steps"] if step.get("success", False))
                            total_steps = len(workflow["steps"])
                            f.write(f"  - Îã®Í≥Ñ ÏÑ±Í≥µÎ•†: {successful_steps}/{total_steps} ({successful_steps/total_steps*100:.1f}%)\n")
                    f.write("\n")
                
                # Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞
                if "advanced_workflows" in results and "workflow_results" in results["advanced_workflows"]:
                    f.write("### Í≥†Í∏â ÏõåÌÅ¨ÌîåÎ°úÏö∞\n")
                    for workflow in results["advanced_workflows"]["workflow_results"]:
                        name = workflow.get("workflow_name", "Unknown")
                        success = "‚úÖ" if workflow.get("overall_success", False) else "‚ùå"
                        f.write(f"- {success} **{name}**\n")
                        
                        if "steps" in workflow:
                            successful_steps = sum(1 for step in workflow["steps"] if step.get("success", False))
                            total_steps = len(workflow["steps"])
                            f.write(f"  - Îã®Í≥Ñ ÏÑ±Í≥µÎ•†: {successful_steps}/{total_steps} ({successful_steps/total_steps*100:.1f}%)\n")
                    f.write("\n")
                
                # Í∂åÏû•ÏÇ¨Ìï≠
                f.write("## üí° Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠\n\n")
                for i, recommendation in enumerate(results.get("recommendations", []), 1):
                    f.write(f"{i}. {recommendation}\n")
                f.write("\n")
                
                # Í≤∞Î°†
                f.write("## üéä Í≤∞Î°†\n\n")
                
                if "overall_summary" in results:
                    overall_success = results["overall_summary"]["overall_success_rate"]
                    performance = results["overall_summary"]["performance_score"]
                    
                    if overall_success >= 90 and performance >= 85:
                        grade = "A+ (Ïö∞Ïàò)"
                        conclusion = "ÎìúÎ°≠Ïâ¨Ìïë ÏãúÏä§ÌÖúÏù¥ Î™®Îì† ÌïµÏã¨ ÎπÑÏ¶àÎãàÏä§ ÏõåÌÅ¨ÌîåÎ°úÏö∞ÏóêÏÑú Ïö∞ÏàòÌïú ÏÑ±Îä•ÏùÑ Î≥¥ÏûÖÎãàÎã§."
                    elif overall_success >= 80 and performance >= 75:
                        grade = "A (ÏñëÌò∏)"
                        conclusion = "ÏãúÏä§ÌÖúÏù¥ ÏïàÏ†ïÏ†ÅÏúºÎ°ú ÏûëÎèôÌïòÎ©∞, Î™á Í∞ÄÏßÄ Í∞úÏÑ†ÏùÑ ÌÜµÌï¥ ÎçîÏö± Ìñ•ÏÉÅÎê† Ïàò ÏûàÏäµÎãàÎã§."
                    elif overall_success >= 70 and performance >= 65:
                        grade = "B (Î≥¥ÌÜµ)"
                        conclusion = "Í∏∞Î≥∏Ï†ÅÏù∏ Í∏∞Îä•ÏùÄ Ïûò ÏûëÎèôÌïòÏßÄÎßå, ÏÑ±Îä•Í≥º ÏïàÏ†ïÏÑ± Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§."
                    else:
                        grade = "C (Í∞úÏÑ† ÌïÑÏöî)"
                        conclusion = "ÏãúÏä§ÌÖú ÏïàÏ†ïÏÑ±Í≥º ÏÑ±Îä•Ïóê ÎåÄÌïú Ï§ëÎåÄÌïú Í∞úÏÑ†Ïù¥ ÏãúÍ∏âÌï©ÎãàÎã§."
                    
                    f.write(f"**Ï¢ÖÌï© Îì±Í∏â**: {grade}\n\n")
                    f.write(f"{conclusion}\n\n")
                
                f.write("---\n")
                f.write("*Ïù¥ Î≥¥Í≥†ÏÑúÎäî ÏûêÎèô ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.*\n")
                
        except Exception as e:
            logger.error(f"ÎßàÌÅ¨Îã§Ïö¥ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïã§Ìå®: {str(e)}")
    
    async def _generate_business_report(self, results: Dict, file_path: str):
        """ÎπÑÏ¶àÎãàÏä§ Ï§ëÏã¨Ïùò Excel Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        try:
            import pandas as pd
            
            # ÏöîÏïΩ Îç∞Ïù¥ÌÑ∞
            summary_data = []
            if "overall_summary" in results:
                summary = results["overall_summary"]
                summary_data = [
                    ["ÌÖåÏä§Ìä∏Îêú ÏõåÌÅ¨ÌîåÎ°úÏö∞", f"{summary['total_workflows_tested']}Í∞ú"],
                    ["ÏÑ±Í≥µÎ•†", f"{summary['overall_success_rate']:.1f}%"],
                    ["ÏÑ±Îä• Ï†êÏàò", f"{summary['performance_score']:.1f}/100"],
                    ["ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ï†êÏàò", f"{summary['user_experience_score']:.1f}/100"],
                    ["ÏãúÏä§ÌÖú Ïã†Î¢∞ÏÑ±", f"{summary['system_reliability_score']:.1f}/100"]
                ]
            
            # ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ Îç∞Ïù¥ÌÑ∞
            impact_data = []
            if "business_impact_analysis" in results:
                impact = results["business_impact_analysis"]
                impact_data = [
                    ["ÏÉùÏÇ∞ÏÑ±", "Ï≤òÎ¶¨Îêú ÏÉÅÌíà", f"{impact['productivity_improvements']['total_products_processed']:,}Í∞ú"],
                    ["ÏÉùÏÇ∞ÏÑ±", "Ï†àÏïΩÎêú ÏãúÍ∞Ñ", f"{impact['productivity_improvements']['time_saved_hours']:.1f}ÏãúÍ∞Ñ"],
                    ["ÎπÑÏö©", "ÏõîÍ∞Ñ Ï†àÏïΩ", f"{impact['cost_benefits']['estimated_monthly_savings']:,}Ïõê"],
                    ["ÎπÑÏö©", "ROI", f"{impact['cost_benefits']['automation_roi']:.1f}%"],
                    ["ÏÇ¨Ïö©Ïûê", "ÎßåÏ°±ÎèÑ Ï¶ùÍ∞Ä", f"{impact['user_experience_improvements']['user_satisfaction_increase']:.1f}%"],
                    ["ÏãúÏä§ÌÖú", "ÏÑ±Îä• Ìñ•ÏÉÅ", f"{impact['system_performance_gains']['response_time_improvement']:.1f}%"]
                ]
            
            # Excel ÌååÏùº ÏÉùÏÑ±
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                # ÏöîÏïΩ ÏãúÌä∏
                df_summary = pd.DataFrame(summary_data, columns=["ÏßÄÌëú", "Í∞í"])
                df_summary.to_excel(writer, sheet_name='ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ', index=False)
                
                # ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ ÏãúÌä∏
                df_impact = pd.DataFrame(impact_data, columns=["Ïπ¥ÌÖåÍ≥†Î¶¨", "ÏßÄÌëú", "Í∞í"])
                df_impact.to_excel(writer, sheet_name='ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏', index=False)
                
                # Í∂åÏû•ÏÇ¨Ìï≠ ÏãúÌä∏
                recommendations_data = [[i+1, rec] for i, rec in enumerate(results.get("recommendations", []))]
                df_recommendations = pd.DataFrame(recommendations_data, columns=["ÏàúÏúÑ", "Í∂åÏû•ÏÇ¨Ìï≠"])
                df_recommendations.to_excel(writer, sheet_name='Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠', index=False)
            
            logger.info(f"‚úÖ ÎπÑÏ¶àÎãàÏä§ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å: {file_path}")
            
        except Exception as e:
            logger.error(f"ÎπÑÏ¶àÎãàÏä§ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïã§Ìå®: {str(e)}")
            # pandasÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏ ÌååÏùºÎ°ú ÎåÄÏ≤¥
            try:
                with open(file_path.replace('.xlsx', '.txt'), 'w', encoding='utf-8') as f:
                    f.write("ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏ Î≥¥Í≥†ÏÑú\n")
                    f.write("=" * 30 + "\n\n")
                    f.write(json.dumps(results.get("business_impact_analysis", {}), indent=2, ensure_ascii=False))
            except:
                pass
    
    def _print_final_results(self, results: Dict):
        """ÏµúÏ¢Ö Í≤∞Í≥º ÏΩòÏÜî Ï∂úÎ†•"""
        print("\n" + "=" * 80)
        print("üéâ ÎìúÎ°≠Ïâ¨Ìïë ÏãúÏä§ÌÖú ÏôÑÏ†ÑÌïú E2E ÌÖåÏä§Ìä∏ ÏôÑÎ£å!")
        print("=" * 80)
        
        if "overall_summary" in results:
            summary = results["overall_summary"]
            print(f"\nüìä ÌïµÏã¨ ÏßÄÌëú:")
            print(f"   ‚úÖ Ï†ÑÏ≤¥ ÏÑ±Í≥µÎ•†: {summary['overall_success_rate']:.1f}%")
            print(f"   üöÄ ÏÑ±Îä• Ï†êÏàò: {summary['performance_score']:.1f}/100")
            print(f"   üë§ ÏÇ¨Ïö©Ïûê Í≤ΩÌóò: {summary['user_experience_score']:.1f}/100")
            print(f"   üõ°Ô∏è  ÏãúÏä§ÌÖú Ïã†Î¢∞ÏÑ±: {summary['system_reliability_score']:.1f}/100")
        
        if "business_impact_analysis" in results:
            impact = results["business_impact_analysis"]
            print(f"\nüíº ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏:")
            print(f"   üì¶ Ï≤òÎ¶¨Îêú ÏÉÅÌíà: {impact['productivity_improvements']['total_products_processed']:,}Í∞ú")
            print(f"   ‚è∞ Ï†àÏïΩÎêú ÏãúÍ∞Ñ: {impact['productivity_improvements']['time_saved_hours']:.1f}ÏãúÍ∞Ñ")
            print(f"   üí∞ ÏõîÍ∞Ñ Ï†àÏïΩÏï°: {impact['cost_benefits']['estimated_monthly_savings']:,}Ïõê")
            print(f"   üìà ÏûêÎèôÌôî ROI: {impact['cost_benefits']['automation_roi']:.1f}%")
        
        print(f"\n‚è±Ô∏è  Ï¥ù Ïã§Ìñâ ÏãúÍ∞Ñ: {results['total_execution_time']:.2f}Ï¥à")
        print(f"üìÑ ÏÉÅÏÑ∏ Í≤∞Í≥ºÎäî Îã§Ïùå ÌååÏùºÎì§Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§:")
        print(f"   - complete_e2e_test_results_{results['test_session_id']}.json")
        print(f"   - e2e_test_summary_{results['test_session_id']}.md")
        print(f"   - business_impact_report_{results['test_session_id']}.xlsx (ÎòêÎäî .txt)")
        
        # ÏµúÏ¢Ö Îì±Í∏â Í≥ÑÏÇ∞ Î∞è Ï∂úÎ†•
        if "overall_summary" in results:
            overall_success = results["overall_summary"]["overall_success_rate"]
            performance = results["overall_summary"]["performance_score"]
            user_experience = results["overall_summary"]["user_experience_score"]
            
            final_score = (overall_success + performance + user_experience) / 3
            
            if final_score >= 90:
                grade = "A+"
                emoji = "üèÜ"
            elif final_score >= 80:
                grade = "A"
                emoji = "ü•á"
            elif final_score >= 70:
                grade = "B"
                emoji = "ü•à"
            elif final_score >= 60:
                grade = "C"
                emoji = "ü•â"
            else:
                grade = "D"
                emoji = "‚ö†Ô∏è"
            
            print(f"\n{emoji} ÏµúÏ¢Ö Îì±Í∏â: {grade} ({final_score:.1f}Ï†ê)")
        
        print("\nüöÄ ÎìúÎ°≠Ïâ¨Ìïë ÏãúÏä§ÌÖú E2E ÌÖåÏä§Ìä∏ ÏôÑÎ£å! ÎπÑÏ¶àÎãàÏä§ ÏÑ±Í≥µÏùÑ ÏúÑÌïú Ï§ÄÎπÑÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")

async def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    runner = CompleteE2ETestRunner()
    results = await runner.run_all_workflow_tests()
    return results

if __name__ == "__main__":
    # ÏôÑÏ†ÑÌïú E2E ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    results = asyncio.run(main())