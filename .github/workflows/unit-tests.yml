name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dropshipping_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-html pytest-json-report
    
    - name: Set up environment
      run: |
        cp backend/.env.example backend/.env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/dropshipping_test" >> backend/.env
        echo "REDIS_URL=redis://localhost:6379" >> backend/.env
        echo "TESTING=true" >> backend/.env
    
    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
    
    - name: Run unit tests
      run: |
        cd backend
        python run_tests.py --all
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/tests/reports/
          backend/tests/coverage_html_report/
          backend/tests/coverage.json
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/tests/coverage.json
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false
    
    - name: Comment PR with results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('backend/tests/coverage.json', 'utf8'));
          const totalCoverage = coverage.totals.percent_covered;
          
          const comment = `## 🧪 테스트 결과
          
          - **Python 버전**: ${{ matrix.python-version }}
          - **전체 코드 커버리지**: ${totalCoverage.toFixed(2)}%
          - **테스트 상태**: ${{ job.status }}
          
          자세한 결과는 [아티팩트](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})를 확인하세요.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Check coverage threshold
      run: |
        cd backend
        coverage_percent=$(python -c "import json; print(json.load(open('tests/coverage.json'))['totals']['percent_covered'])")
        if (( $(echo "$coverage_percent < 80" | bc -l) )); then
          echo "❌ 코드 커버리지가 80% 미만입니다: $coverage_percent%"
          exit 1
        else
          echo "✅ 코드 커버리지: $coverage_percent%"
        fi