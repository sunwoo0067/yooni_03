name: Mobile CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'mobile/**'
      - '.github/workflows/mobile-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'mobile/**'

env:
  NODE_VERSION: '18'
  RUBY_VERSION: '3.0'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push'
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "WS_URL=${{ secrets.WS_URL }}" >> .env
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "CODEPUSH_KEY_ANDROID=${{ secrets.CODEPUSH_KEY_ANDROID }}" >> .env

      - name: Build Android Debug
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Build Android Release
        if: github.ref == 'refs/heads/main'
        run: |
          cd android
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore
          echo "MYAPP_UPLOAD_STORE_FILE=release.keystore" >> gradle.properties
          echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> gradle.properties
          echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> gradle.properties
          ./gradlew assembleRelease

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-build
          path: |
            mobile/android/app/build/outputs/apk/debug/*.apk
            mobile/android/app/build/outputs/apk/release/*.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: lint-and-test
    if: github.event_name == 'push'
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      - name: Create .env file
        run: |
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "WS_URL=${{ secrets.WS_URL }}" >> .env
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "CODEPUSH_KEY_IOS=${{ secrets.CODEPUSH_KEY_IOS }}" >> .env

      - name: Build iOS Debug
        run: |
          cd ios
          xcodebuild -workspace YooniDashboard.xcworkspace \
            -scheme YooniDashboard \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath build \
            build

      - name: Build iOS Release
        if: github.ref == 'refs/heads/main'
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        run: |
          cd ios
          bundle install
          bundle exec fastlane ios build_release

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: |
            mobile/ios/build/Build/Products/Debug-iphonesimulator/*.app
            mobile/ios/build/*.ipa

  deploy-codepush:
    name: Deploy to CodePush
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          npm install -g appcenter-cli

      - name: Login to App Center
        run: appcenter login --token ${{ secrets.APPCENTER_TOKEN }}

      - name: Deploy to CodePush (iOS)
        run: |
          appcenter codepush release-react \
            -a ${{ secrets.APPCENTER_ORG }}/YooniDashboard-iOS \
            -d Production \
            --description "Release from GitHub Actions"

      - name: Deploy to CodePush (Android)
        run: |
          appcenter codepush release-react \
            -a ${{ secrets.APPCENTER_ORG }}/YooniDashboard-Android \
            -d Production \
            --description "Release from GitHub Actions"

  deploy-stores:
    name: Deploy to App Stores
    runs-on: macos-latest
    needs: [build-android, build-ios]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy]')
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: mobile/artifacts

      - name: Deploy to Google Play
        env:
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          cd android
          bundle install
          bundle exec fastlane android deploy

      - name: Deploy to App Store
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_ASP }}
        run: |
          cd ios
          bundle install
          bundle exec fastlane ios deploy