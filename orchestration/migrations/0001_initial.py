# Generated by Django 5.1.5 on 2025-07-16 05:12

import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Workflow template name', max_length=255, unique=True)),
                ('code', models.SlugField(help_text='Unique identifier code', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this workflow does')),
                ('workflow_type', models.CharField(choices=[('product_import', 'Product Import'), ('listing_creation', 'Listing Creation'), ('inventory_sync', 'Inventory Sync'), ('order_processing', 'Order Processing'), ('price_optimization', 'Price Optimization'), ('data_enrichment', 'Data Enrichment'), ('custom', 'Custom Workflow')], help_text='Type of workflow', max_length=50)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Workflow-specific configuration')),
                ('max_retries', models.IntegerField(default=3, help_text='Maximum retry attempts for failed steps')),
                ('retry_delay_seconds', models.IntegerField(default=300, help_text='Delay between retry attempts in seconds')),
                ('timeout_minutes', models.IntegerField(default=60, help_text='Maximum execution time in minutes')),
                ('is_scheduled', models.BooleanField(default=False, help_text='Whether this workflow runs on a schedule')),
                ('schedule_config', models.JSONField(blank=True, default=dict, help_text='Schedule configuration (cron expression, frequency, etc.)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('draft', 'Draft'), ('deprecated', 'Deprecated')], default='draft', max_length=20)),
                ('version', models.IntegerField(default=1, help_text='Workflow version number')),
                ('total_executions', models.IntegerField(default=0, help_text='Total number of executions')),
                ('successful_executions', models.IntegerField(default=0, help_text='Number of successful executions')),
                ('failed_executions', models.IntegerField(default=0, help_text='Number of failed executions')),
                ('average_duration_seconds', models.FloatField(default=0.0, help_text='Average execution duration in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflows_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workflows',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Schedule name', max_length=255)),
                ('schedule_type', models.CharField(choices=[('cron', 'Cron Expression'), ('interval', 'Fixed Interval'), ('daily', 'Daily at Specific Time'), ('weekly', 'Weekly on Specific Days'), ('monthly', 'Monthly on Specific Days')], help_text='Type of schedule', max_length=20)),
                ('cron_expression', models.CharField(blank=True, help_text='Cron expression (for cron type)', max_length=100)),
                ('interval_minutes', models.IntegerField(blank=True, help_text='Interval in minutes (for interval type)', null=True)),
                ('time_of_day', models.TimeField(blank=True, help_text='Time of day for daily schedules', null=True)),
                ('days_of_week', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, help_text='Days of week (0=Monday, 6=Sunday)', size=None)),
                ('days_of_month', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, help_text='Days of month (1-31)', size=None)),
                ('is_active', models.BooleanField(default=True, help_text='Whether schedule is active')),
                ('timezone', models.CharField(default='UTC', help_text='Timezone for schedule', max_length=50)),
                ('input_data', models.JSONField(blank=True, default=dict, help_text='Default input data for scheduled executions')),
                ('last_run_at', models.DateTimeField(blank=True, help_text='Last scheduled execution', null=True)),
                ('next_run_at', models.DateTimeField(blank=True, help_text='Next scheduled execution', null=True)),
                ('total_runs', models.IntegerField(default=0, help_text='Total number of scheduled runs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflow_schedules_created', to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='orchestration.workflow')),
            ],
            options={
                'db_table': 'workflow_schedules',
                'ordering': ['workflow', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Step name', max_length=255)),
                ('step_type', models.CharField(choices=[('data_fetch', 'Fetch Data'), ('data_transform', 'Transform Data'), ('data_validate', 'Validate Data'), ('api_call', 'API Call'), ('database_query', 'Database Query'), ('condition_check', 'Conditional Check'), ('parallel_process', 'Parallel Process'), ('notification', 'Send Notification'), ('ai_process', 'AI Processing'), ('custom', 'Custom Step')], help_text='Type of step', max_length=50)),
                ('description', models.TextField(blank=True, help_text='What this step does')),
                ('order', models.IntegerField(help_text='Execution order (lower numbers execute first)')),
                ('config', models.JSONField(default=dict, help_text='Step-specific configuration')),
                ('is_optional', models.BooleanField(default=False, help_text='Whether failure of this step should stop the workflow')),
                ('can_retry', models.BooleanField(default=True, help_text='Whether this step can be retried on failure')),
                ('max_retries', models.IntegerField(default=3, help_text='Maximum retry attempts (overrides workflow setting)')),
                ('timeout_seconds', models.IntegerField(default=300, help_text='Step timeout in seconds')),
                ('condition', models.JSONField(blank=True, default=dict, help_text='Conditions that must be met for step to execute')),
                ('can_run_parallel', models.BooleanField(default=False, help_text='Whether this step can run in parallel with others')),
                ('parallel_group', models.CharField(blank=True, help_text='Group identifier for parallel execution', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('depends_on_steps', models.ManyToManyField(blank=True, help_text='Steps that must complete before this one', related_name='dependent_steps', to='orchestration.workflowstep')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='orchestration.workflow')),
            ],
            options={
                'db_table': 'workflow_steps',
                'ordering': ['workflow', 'order'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_id', models.CharField(help_text='Unique execution identifier', max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('paused', 'Paused')], default='pending', max_length=20)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual'), ('scheduled', 'Scheduled'), ('api', 'API Trigger'), ('event', 'Event Triggered'), ('webhook', 'Webhook')], help_text='How the workflow was triggered', max_length=20)),
                ('input_data', models.JSONField(blank=True, default=dict, help_text='Input parameters for the workflow')),
                ('output_data', models.JSONField(blank=True, default=dict, help_text='Output/results from the workflow')),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Shared context data between steps')),
                ('total_steps', models.IntegerField(default=0, help_text='Total number of steps in workflow')),
                ('completed_steps', models.IntegerField(default=0, help_text='Number of completed steps')),
                ('started_at', models.DateTimeField(blank=True, help_text='When execution started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When execution completed', null=True)),
                ('duration_seconds', models.FloatField(blank=True, help_text='Total execution duration in seconds', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if execution failed')),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Tags for categorizing executions', size=None)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this execution')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflow_executions_triggered', to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='orchestration.workflow')),
                ('current_step', models.ForeignKey(blank=True, help_text='Currently executing step', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_executions', to='orchestration.workflowstep')),
                ('error_step', models.ForeignKey(blank=True, help_text='Step where error occurred', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='failed_executions', to='orchestration.workflowstep')),
            ],
            options={
                'db_table': 'workflow_executions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowStepExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('skipped', 'Skipped'), ('retrying', 'Retrying')], default='pending', max_length=20)),
                ('execution_order', models.IntegerField(help_text='Actual execution order')),
                ('input_data', models.JSONField(blank=True, default=dict, help_text='Input data for this step')),
                ('output_data', models.JSONField(blank=True, default=dict, help_text='Output data from this step')),
                ('started_at', models.DateTimeField(blank=True, help_text='When step execution started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When step execution completed', null=True)),
                ('duration_seconds', models.FloatField(blank=True, help_text='Step execution duration in seconds', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if step failed')),
                ('error_details', models.JSONField(blank=True, default=dict, help_text='Detailed error information')),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts for this step')),
                ('metrics', models.JSONField(blank=True, default=dict, help_text='Step-specific metrics (e.g., records processed)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('workflow_execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_executions', to='orchestration.workflowexecution')),
                ('workflow_step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='orchestration.workflowstep')),
            ],
            options={
                'db_table': 'workflow_step_executions',
                'ordering': ['workflow_execution', 'execution_order'],
            },
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['code'], name='workflows_code_8b0596_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['workflow_type'], name='workflows_workflo_5d25d1_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['status'], name='workflows_status_9addf4_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowschedule',
            index=models.Index(fields=['is_active', 'next_run_at'], name='workflow_sc_is_acti_265901_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowschedule',
            index=models.Index(fields=['workflow', 'is_active'], name='workflow_sc_workflo_7b025c_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstep',
            index=models.Index(fields=['workflow', 'order'], name='workflow_st_workflo_f2a951_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstep',
            index=models.Index(fields=['step_type'], name='workflow_st_step_ty_c4f7f5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowstep',
            unique_together={('workflow', 'order')},
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['execution_id'], name='workflow_ex_executi_29e88f_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['workflow', 'status'], name='workflow_ex_workflo_05fdb2_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['status'], name='workflow_ex_status_a94a8d_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['created_at'], name='workflow_ex_created_d04815_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['trigger_type'], name='workflow_ex_trigger_151853_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstepexecution',
            index=models.Index(fields=['workflow_execution', 'status'], name='workflow_st_workflo_634d8f_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstepexecution',
            index=models.Index(fields=['status'], name='workflow_st_status_5a93f7_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstepexecution',
            index=models.Index(fields=['started_at'], name='workflow_st_started_d09ed4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowstepexecution',
            unique_together={('workflow_execution', 'workflow_step')},
        ),
    ]
