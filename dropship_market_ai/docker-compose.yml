version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: dropship_postgres
    environment:
      POSTGRES_DB: dropship_market_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dropship_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dropship_app
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/dropship_market_ai
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dropship_scheduler
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/dropship_market_ai
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python scripts/scheduler.py

  prometheus:
    image: prom/prometheus:latest
    container_name: dropship_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: dropship_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: