# 기본 서버 블록 - HTTP에서 HTTPS로 리다이렉트
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    # Let's Encrypt 인증서 갱신을 위한 경로
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # 모든 HTTP 요청을 HTTPS로 리다이렉트
    location / {
        return 301 https://$host$request_uri;
    }
}

# 메인 HTTPS 서버 블록
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name yourdomain.com www.yourdomain.com;
    
    # SSL 인증서 설정
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
    
    # 보안 설정
    include /etc/nginx/conf.d/security.conf;
    
    # Rate limiting 적용
    limit_req zone=general burst=50 nodelay;
    limit_conn conn_limit_per_ip 20;
    
    # 국가 차단 (설정된 경우)
    # if ($blocked_country) {
    #     return 403;
    # }
    
    # 악성 User-Agent 차단
    if ($blocked_agent) {
        return 403;
    }
    
    # 정적 파일 최적화
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt|tar|gz|zip|mp4|webm|webp|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "HIT" always;
        access_log off;
        
        # CORS 헤더 (필요한 경우)
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        
        # 압축 최적화
        gzip_static on;
        
        try_files $uri @frontend;
    }
    
    # API 요청 프록시
    location /api/ {
        # Rate limiting for API
        limit_req zone=api burst=20 nodelay;
        
        # 프록시 설정
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 버퍼링 설정
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # 타임아웃 설정
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 캐시 설정 (GET 요청만)
        proxy_cache api_cache;
        proxy_cache_methods GET;
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        add_header X-Cache-Status $upstream_cache_status always;
        
        # 에러 페이지
        proxy_intercept_errors on;
        error_page 500 502 503 504 /50x.html;
    }
    
    # 인증 API (로그인/회원가입) - 특별한 rate limiting
    location ~ ^/api/v1/(auth|login|register) {
        limit_req zone=login burst=5 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 인증 요청은 캐시하지 않음
        proxy_cache off;
        
        # 보안 헤더 추가
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
    }
    
    # WebSocket 연결
    location /ws/ {
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 타임아웃 설정
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # WebSocket 연결 유지
        proxy_buffering off;
    }
    
    # 헬스 체크 엔드포인트
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }
    
    # 관리자 페이지 접근 제한
    location /admin/ {
        # IP 화이트리스트 (관리자 IP만 허용)
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://backend_servers;
        include /etc/nginx/conf.d/proxy.conf;
    }
    
    # 모니터링 엔드포인트 (Prometheus, Grafana)
    location /monitoring/ {
        # IP 제한
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        proxy_pass http://prometheus:9090/;
        include /etc/nginx/conf.d/proxy.conf;
    }
    
    location /grafana/ {
        # IP 제한
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        proxy_pass http://grafana:3000/;
        include /etc/nginx/conf.d/proxy.conf;
    }
    
    # 프론트엔드 SPA 라우팅
    location / {
        try_files $uri $uri/ @frontend;
    }
    
    location @frontend {
        proxy_pass http://frontend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 캐시 설정
        proxy_cache static_cache;
        proxy_cache_valid 200 1h;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        add_header X-Cache-Status $upstream_cache_status always;
        
        # SPA를 위한 오류 처리
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }
    
    # SPA 폴백 (React Router 등)
    location @fallback {
        proxy_pass http://frontend_servers/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 보안을 위한 파일 접근 차단
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(bak|backup|old|orig|original|tmp|temp|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 에러 페이지
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# 서브도메인 처리 (API 전용)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.yourdomain.com;
    
    # SSL 인증서
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    
    # 보안 설정
    include /etc/nginx/conf.d/security.conf;
    
    # CORS 설정
    add_header Access-Control-Allow-Origin "https://yourdomain.com" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
    
    # OPTIONS 요청 처리
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "https://yourdomain.com";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
        add_header Access-Control-Max-Age 1728000;
        add_header Content-Type "text/plain; charset=utf-8";
        add_header Content-Length 0;
        return 204;
    }
    
    # API 요청만 처리
    location / {
        limit_req zone=api burst=30 nodelay;
        
        proxy_pass http://backend_servers;
        include /etc/nginx/conf.d/proxy.conf;
        
        # API 전용 캐시 설정
        proxy_cache api_cache;
        proxy_cache_valid 200 302 2m;
        proxy_cache_valid 404 30s;
    }
}